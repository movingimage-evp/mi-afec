name: Check for outdated GitHub Actions
on:
  pull_request:
    types: [edited, opened, synchronize, reopened]

jobs:
  check-actions:
    name: Check for GHA updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: '20'

      - name: Install actions-up
        run: npm install -g actions-up

      - name: Run actions-up check
        id: actions-check
        run: |
          echo "## GitHub Actions Update Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Initialize variables
          HAS_UPDATES=false
          UPDATE_COUNT=0

          # Run actions-up and capture output (force no color output)
          echo "Running actions-up to check for updates..."

          if [ "${{ inputs.check-mode }}" == "dry-run" ]; then
            NO_COLOR=1 FORCE_COLOR=0 actions-up --dry-run > actions-up-raw.txt 2>&1 || true
          else
            # Run in non-interactive mode to just check
            NO_COLOR=1 FORCE_COLOR=0 actions-up --dry-run > actions-up-raw.txt 2>&1 || true
          fi

          # Strip ANSI color codes from the output
          sed -i 's/\x1b\[[0-9;]*m//g' actions-up-raw.txt

          # Also remove any other control characters
          sed -i 's/\x1b\[[0-9;]*[a-zA-Z]//g' actions-up-raw.txt

          # Parse the output to detect updates
          # Look for patterns like "v3 ‚Üí v4" or "would be updated"
          if grep -E "(‚Üí|would be updated|Update available)" actions-up-raw.txt > /dev/null 2>&1; then
            HAS_UPDATES=true
            # Count the number of updates (lines with arrows)
            UPDATE_COUNT=$(grep -c "‚Üí" actions-up-raw.txt || echo "0")
          fi

          # Create formatted output
          if [ "$HAS_UPDATES" = true ]; then
            echo "‚ö†Ô∏è Found $UPDATE_COUNT GitHub Actions with available updates" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>Click to see details</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat actions-up-raw.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY

            # Create detailed markdown report with better formatting
            {
              echo "## üîÑ GitHub Actions Update Report"
              echo ""

              # Extract summary information
              TOTAL_ACTIONS=$(grep -oP 'Found \K[0-9]+(?= actions)' actions-up-raw.txt | head -1 || echo "0")
              BREAKING_UPDATES=$(grep -oP '\(([0-9]+) breaking\)' actions-up-raw.txt | grep -oP '[0-9]+' || echo "0")

              echo "### Summary"
              echo "- **Total actions scanned:** $TOTAL_ACTIONS"
              echo "- **Updates available:** $UPDATE_COUNT"
              if [ "$BREAKING_UPDATES" != "0" ]; then
                echo "- **‚ö†Ô∏è Breaking changes:** $BREAKING_UPDATES"
              fi
              echo ""

              echo "### üìã Available Updates"
              echo ""

              # Format the updates in a table
              echo "| Workflow File | Action | Current | Available | Type | Release Notes |"
              echo "|--------------|--------|---------|-----------|------|---------------|"

              # Parse each update line
              grep "‚Üí" actions-up-raw.txt | while IFS= read -r line; do
                # Extract workflow file path (remove leading path)
                if echo "$line" | grep -q "\.github/workflows/"; then
                  PREV_FILE=$(echo "$line" | grep -oP '\.github/workflows/[^:]+' | head -1)
                fi

                # Skip file path lines, process only action updates
                if echo "$line" | grep -q ": .* ‚Üí "; then
                  # Extract action name and versions
                  ACTION=$(echo "$line" | cut -d: -f1 | xargs)
                  CURRENT=$(echo "$line" | grep -oP 'v[0-9]+(\.[0-9]+)*' | head -1)
                  NEW=$(echo "$line" | grep -oP '‚Üí \Kv[0-9]+(\.[0-9]+)*' | head -1)

                  # Determine if it's a breaking change
                  CURRENT_MAJOR=$(echo "$CURRENT" | grep -oP 'v\K[0-9]+' || echo "0")
                  NEW_MAJOR=$(echo "$NEW" | grep -oP 'v\K[0-9]+' || echo "0")

                  if [ "$CURRENT_MAJOR" != "$NEW_MAJOR" ]; then
                    TYPE="‚ö†Ô∏è Breaking"
                    # Generate release URL
                    # Handle both owner/repo and just repo formats
                    if echo "$ACTION" | grep -q "/"; then
                      REPO_PATH="$ACTION"
                    else
                      # For actions without owner, assume it's under 'actions' org
                      REPO_PATH="actions/$ACTION"
                    fi
                    RELEASE_URL="https://github.com/${REPO_PATH}/releases/tag/${NEW}"
                    RELEASE_LINK="[üìÑ Release](${RELEASE_URL})"
                  else
                    TYPE="‚úÖ Minor"
                    RELEASE_LINK="-"
                  fi

                  # Output table row
                  WORKFLOW_NAME=$(basename "$PREV_FILE" 2>/dev/null || echo "workflow.yml")
                  echo "| \`$WORKFLOW_NAME\` | $ACTION | $CURRENT | **$NEW** | $TYPE | $RELEASE_LINK |"
                fi
              done

              echo ""
              echo "### üìù How to Update"
              echo ""
              echo "You have several options to update these actions:"
              echo ""
              echo "#### Option 1: Automatic Update (Recommended)"
              echo '```bash'
              echo "# Run this command locally in your repository"
              echo "npx actions-up"
              echo '```'
              echo ""
              echo "#### Option 2: Manual Update"
              echo "1. Review each update in the table above"
              echo "2. For ‚ö†Ô∏è breaking changes, click the Release Notes link to review changes"
              echo "3. Edit the workflow files and update the version numbers"
              echo "4. Test the changes in your CI/CD pipeline"
              echo ""
              echo "#### Option 3: Selective Update"
              echo '```bash'
              echo "# Update only non-breaking changes"
              echo "npx actions-up --breaking false"
              echo '```'
              echo ""

              if [ "$BREAKING_UPDATES" != "0" ]; then
                echo "### ‚ö†Ô∏è Breaking Changes Warning"
                echo ""
                echo "This update includes **$BREAKING_UPDATES breaking change(s)**. Please review the release notes before updating:"
                echo ""
                grep "‚Üí" actions-up-raw.txt | while IFS= read -r line; do
                  if echo "$line" | grep -q ": .* ‚Üí "; then
                    ACTION=$(echo "$line" | cut -d: -f1 | xargs)
                    CURRENT=$(echo "$line" | grep -oP 'v[0-9]+' | head -1)
                    NEW=$(echo "$line" | grep -oP '‚Üí \Kv[0-9]+(\.[0-9]+)*' | head -1)
                    CURRENT_MAJOR=$(echo "$CURRENT" | grep -oP '[0-9]+' || echo "0")
                    NEW_MAJOR=$(echo "$NEW" | grep -oP '[0-9]+' || echo "0")
                    if [ "$CURRENT_MAJOR" != "$NEW_MAJOR" ]; then
                      # Generate release URL
                      if echo "$ACTION" | grep -q "/"; then
                        REPO_PATH="$ACTION"
                      else
                        REPO_PATH="actions/$ACTION"
                      fi
                      RELEASE_URL="https://github.com/${REPO_PATH}/releases/tag/${NEW}"
                      echo "- **$ACTION**: $CURRENT ‚Üí $NEW - [View Release Notes](${RELEASE_URL})"
                    fi
                  fi
                done
                echo ""
                echo "**Important:** Breaking changes may require modifications to your workflow configuration. Always review the release notes and test thoroughly."
                echo ""
              fi

              echo "---"
              echo ""
              echo "<details>"
              echo "<summary>üìÑ Raw actions-up output</summary>"
              echo ""
              echo '```'
              cat actions-up-raw.txt
              echo '```'
              echo "</details>"
            } > actions-up-report.md

            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "update-count=$UPDATE_COUNT" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ All GitHub Actions are up to date!" >> $GITHUB_STEP_SUMMARY

            {
              echo "## ‚úÖ GitHub Actions Update Report"
              echo ""
              echo "### All GitHub Actions in this repository are up to date!"
              echo ""
              echo "No action required. Your workflow files are using the latest versions of all GitHub Actions."
            } > actions-up-report.md

            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "update-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with updates
        if: github.event_name == 'pull_request'
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('actions-up-report.md', 'utf8');
            const hasUpdates = '${{ steps.actions-check.outputs.has-updates }}' === 'true';
            const updateCount = '${{ steps.actions-check.outputs.update-count }}';

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('GitHub Actions Update Report')
            );

            const commentBody = `${report}

            ---
            *ü§ñ Generated using [actions-up](https://github.com/azat-io/actions-up) | Last check: ${new Date().toISOString()}*`;

            // Only comment if there are updates or if we previously commented
            if (hasUpdates || botComment) {
              if (botComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: commentBody
                });
                console.log('Updated existing comment');
              } else {
                // Create new comment only if there are updates
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });
                console.log('Created new comment');
              }
            } else {
              console.log('No updates found and no previous comment exists - skipping comment');
            }

            // Add or update PR labels based on status
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const hasOutdatedLabel = labels.data.some(label => label.name === 'outdated-actions');

            if (hasUpdates && !hasOutdatedLabel) {
              // Add label if updates are found
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: ['outdated-actions']
                });
                console.log('Added outdated-actions label');
              } catch (error) {
                console.log('Could not add label (might not exist in repo):', error.message);
              }
            } else if (!hasUpdates && hasOutdatedLabel) {
              // Remove label if no updates
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: 'outdated-actions'
                });
                console.log('Removed outdated-actions label');
              } catch (error) {
                console.log('Could not remove label:', error.message);
              }
            }

      - name: Fail if outdated actions found
        if: steps.actions-check.outputs.has-updates == 'true'
        run: |
          echo "::error:: :rotating_light: Found ${{ steps.actions-check.outputs.update-count }} outdated GitHub Actions. Please update them before merging. :rotating_light:"
          echo ""
          echo "You can update them by running: npx actions-up"
          echo "Or manually update the versions in your workflow files."
          exit 1
